/**
 */
package org.sidiff.bug.localization.dataset.systemmodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.sidiff.bug.localization.dataset.systemmodel.util.SystemModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SystemModelItemProviderAdapterFactory extends SystemModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SystemModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.SystemModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemModelItemProvider systemModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.SystemModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemModelAdapter() {
		if (systemModelItemProvider == null) {
			systemModelItemProvider = new SystemModelItemProvider(this);
		}

		return systemModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.View} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewItemProvider viewItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.View}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewAdapter() {
		if (viewItemProvider == null) {
			viewItemProvider = new ViewItemProvider(this);
		}

		return viewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.Change} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeItemProvider changeItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.Change}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeAdapter() {
		if (changeItemProvider == null) {
			changeItemProvider = new ChangeItemProvider(this);
		}

		return changeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.ViewDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewDescriptionItemProvider viewDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.ViewDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewDescriptionAdapter() {
		if (viewDescriptionItemProvider == null) {
			viewDescriptionItemProvider = new ViewDescriptionItemProvider(this);
		}

		return viewDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.Version} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionItemProvider versionItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.Version}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionAdapter() {
		if (versionItemProvider == null) {
			versionItemProvider = new VersionItemProvider(this);
		}

		return versionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.BugReport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BugReportItemProvider bugReportItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.BugReport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBugReportAdapter() {
		if (bugReportItemProvider == null) {
			bugReportItemProvider = new BugReportItemProvider(this);
		}

		return bugReportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.TracedVersion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TracedVersionItemProvider tracedVersionItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.TracedVersion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTracedVersionAdapter() {
		if (tracedVersionItemProvider == null) {
			tracedVersionItemProvider = new TracedVersionItemProvider(this);
		}

		return tracedVersionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.BugReportComment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BugReportCommentItemProvider bugReportCommentItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.BugReportComment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBugReportCommentAdapter() {
		if (bugReportCommentItemProvider == null) {
			bugReportCommentItemProvider = new BugReportCommentItemProvider(this);
		}

		return bugReportCommentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.FileChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileChangeItemProvider fileChangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.FileChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileChangeAdapter() {
		if (fileChangeItemProvider == null) {
			fileChangeItemProvider = new FileChangeItemProvider(this);
		}

		return fileChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.bug.localization.dataset.systemmodel.TracedBugReport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TracedBugReportItemProvider tracedBugReportItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.bug.localization.dataset.systemmodel.TracedBugReport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTracedBugReportAdapter() {
		if (tracedBugReportItemProvider == null) {
			tracedBugReportItemProvider = new TracedBugReportItemProvider(this);
		}

		return tracedBugReportItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (systemModelItemProvider != null) systemModelItemProvider.dispose();
		if (viewItemProvider != null) viewItemProvider.dispose();
		if (changeItemProvider != null) changeItemProvider.dispose();
		if (viewDescriptionItemProvider != null) viewDescriptionItemProvider.dispose();
		if (versionItemProvider != null) versionItemProvider.dispose();
		if (bugReportItemProvider != null) bugReportItemProvider.dispose();
		if (tracedVersionItemProvider != null) tracedVersionItemProvider.dispose();
		if (bugReportCommentItemProvider != null) bugReportCommentItemProvider.dispose();
		if (fileChangeItemProvider != null) fileChangeItemProvider.dispose();
		if (tracedBugReportItemProvider != null) tracedBugReportItemProvider.dispose();
	}

}
